
// Copyright 2020, Jefferson Science Associates, LLC.
// Subject to the terms in the LICENSE file found in the top-level directory.

#pragma once
#include <sstream>

#ifndef JANA2_HAVE_PODIO
#  define JANA2_HAVE_PODIO @JANA2_HAVE_PODIO@
#endif
#ifndef JANA2_HAVE_ROOT
#  define JANA2_HAVE_ROOT @JANA2_HAVE_ROOT@
#endif
#ifndef JANA2_HAVE_XERCES
#  define JANA2_HAVE_XERCES @JANA2_HAVE_XERCES@
#  define XERCES3 @JANA2_HAVE_XERCES3@
#endif


struct JVersion {

    static const int major = @jana2_VERSION_MAJOR@;
    static const int minor = @jana2_VERSION_MINOR@;
    static const int patch = @jana2_VERSION_PATCH@;
    static const std::string last_commit_hash;
    static const std::string last_commit_date;
    static const std::string installdir;
    static const bool is_unknown = @JVERSION_UNKNOWN@;
    static const bool is_release = @JVERSION_RELEASE@;
    static const bool is_modified = @JVERSION_MODIFIED@;

    static unsigned int GetMajorNumber() { return major; }
    static unsigned int GetMinorNumber() { return minor; }
    static unsigned int GetPatchNumber() { return patch; }

    static std::string GetCommitHash() { return last_commit_hash; }
    static std::string GetCommitDate() { return last_commit_date; }
    static std::string GetInstallDir() { return installdir; }

    static bool HasPodio() { return JANA2_HAVE_PODIO; }
    static bool HasROOT() { return JANA2_HAVE_ROOT; }
    static bool HasXerces() { return JANA2_HAVE_XERCES; }

    static std::string GetVersion() {
        std::stringstream ss;
        ss << major << "." << minor << "." << patch;
        if (is_unknown) {
            // ss << " (git status unknown)";
            // If .git is not present, degrade gracefully. Don't lead the user to believe that there is an error
        }
        else if (is_modified) {
            ss << " (uncommitted changes)";
        }
        else if (is_release) {
            ss << " (release)";
        }
        else {
            ss << " (development)";
        }
        return ss.str();
    }
};

// These are defined here to allow cmake to set them but are
// actually used in JMain.cc.
#define JVERSION_COMMIT_HASH "@JVERSION_COMMIT_HASH@"
#define JVERSION_COMMIT_DATE "@JVERSION_COMMIT_DATE@"
#define CMAKE_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@"


